{
  "hash": "9490a6c3e595648c8db553fa2ee8e123",
  "result": {
    "engine": "jupyter",
    "markdown": "---\n# Title\ntitle: \"Input, Processing, and Output \" # 폰트가 굵음으로 짧은 타이틀\nsubtitle: \"MGS3001 Python Programming for Business, Spring 2025\" # 자세한 타이틀\ntitle-slide-attributes:\n    data-background-image: _resource/school_background.jpg\n    data-background-size: contain\n    data-background-opacity: \"0.3\"\n# Author\nauthor: \n  - name: Chungil Chae\n    email: cchae@kean.edu\n# Date\ndate: today\ndate-format: \"ddd, D MMMM YYYY\"\n# Citation\nbibliography: _resource/reference.bib\ncsl: _resource/apa.csl\n# Code\necho: false\ncode-line-numbers: true\n# Format\nformat: \n  revealjs:\n    # 슬라이드 메뉴 위치 \n    menu:\n      side: right\n      width: wide\n    \n    # 스크롤뷰\n    scroll-view: \n      layout: compact\n      snap: proximity\n      progress: true\n      activation-width: 0\n    \n    # 마우스 스크롤 가능여부\n    scrollable: true\n    \n    # 하나씩 보여주기\n    incremental: false\n    \n    # 슬라이드 전체에 작은 글씨 적용\n    smaller: false\n    \n    # 로고와 풋터\n    logo: _resource/chad_tran.png\n    footer: \"© 2025 Chad (Chungil Chae). All rights reserved.\"\n    include-after-body: \n      - \"_resource/all-the-js-code.html\"\n    \n    # 프리젠터 노트를 실제 슬라이드 옆에 표시해 주기\n    # show-notes: separate-page\n    \n    # 슬라이드 자동재생\n    #auto-slide: 5000\n    #loop: true\n    \n    # 전자칠판 기능\n    #chalkboard:  # in order to use chalkboard, embed-resource:false\n      #theme: whiteboard\n      #boardmarker-width: 5\n      #buttons: false\n      #multiplex: true\n    \n    # 트렌지션\n    transition: fade # none fade slide convex concave zoom\n    background-transition: fade\n    transition-speed: fast\n    \n    # 슬라이드 레이아웃\n    navigation-mode: grid #linear vertical grid\n    \n    # 컨프롤 버튼\n    controls-layout: bottom-right\n    controls-tutorial: true\n    \n    # 슬라이드 테마\n    theme: [blood, _resource/styles.scss] #beige blood dark default league moon night serif simple sky solarized # [THEME, _resource/styles.scss]\n    \n    # 프리젠테이션 크기\n    width: 1280\n    height: 720\n    \n    # 모든 리소스를 HTML에 담아서(HTML크기가 커지는 대신에 HTML파일 하나면 쫑)\n    embed-resources: false\n    \n    # 터치 컨트롤 - 스마트폰 사용\n    touch: false\n    controls: true\n    \n    # 기타\n    center-title-slide: true\n    reference-location: document\n    code-block-height: 650px\n    jump-to-slide: true\n    slide-number: true\n    show-slide-number: print\n    preview-links: true\n    slide-tone: false\n    progress: true\n    history: true\n    auto-stretch: false\n    \n\n\n\n---\n\n\n# Learning Objectives {background-color=\"black\" background-image=\"_resource/school_background_blured.png\" background-size=100%}\nThis chapter introduces the program development cycle, variables, data types, and simple programs that are written as sequence structures. The student learns to write simple programs that read input from the keyboard, perform mathematical operations, and produce formatted screen output. Pseudocode and flowcharts are also introduced as tools for designing programs. The chapter also includes an optional introduction to the turtle graphics library[@textbook].\n\n## SHORT VIDEO INTRODUCTION\n{{< video https://www.youtube.com/watch?v=Fi3_BjVzpqk width=\"100%\" height=\"85%\">}}\n\n# Designing a Program {background-color=\"black\" background-image=\"_resource/school_background_blured.png\" background-size=100%}\nPrograms must be carefully designed before they are written. During the design process, programmers use tools such as pseudocode and flowcharts to create models of programs.\n\n## The Program Development Cycle\nThe process of creating a program that works correctly typically requires the five phases known as the program development cycle.\n\n1. **Design the Program**\n2. **Write the Code**\n3. **Correct Syntax Errors**\n4. **Test the Program**\n5. **Correct Logic Errors**\n\n![](_img/program_development_cycle.png){fig-align=center width=900}\n\n:::{.notes}\n1. **Design the Program**. All professional programmers will tell you that a program should be carefully designed before the code is actually written. When programmers begin a new project, they should never jump right in and start writing code as the first step. They start by creating a design of the program. There are several ways to design a program, and later in this section, we will discuss some techniques that you can use to design your Python programs.\n\n2. **Write the Code**. After designing the program, the programmer begins writing code in a high-level language such as Python. Recall from Chapter 1 that each language has its own rules, known as syntax, that must be followed when writing a program. A language’s syntax rules dictate things such as how keywords, operators, and punctuation characters can be used. A syntax error occurs if the programmer violates any of these rules.\n\n3. **Correct Syntax Errors**. If the program contains a syntax error, or even a simple mistake such as a misspelled keyword, the compiler or interpreter will display an error message indicating what the error is. Virtually all code contains syntax errors when it is first written, so the programmer will typically spend some time correcting these. Once all of the syntax errors and simple typing mistakes have been corrected, the program can be compiled and translated into a machine language program (or executed by an interpreter, depending on the language being used).\n\n4. **Test the Program**. Once the code is in an executable form, it is then tested to determine whether any logic errors exist. A logic error is a mistake that does not prevent the program from running, but causes it to produce incorrect results. (Mathematical mistakes are common causes of logic errors.)\n\n5. **Correct Logic Errors**. If the program produces incorrect results, the programmer debugs the code. This means that the programmer finds and corrects logic errors in the program. Sometimes during this process, the programmer discovers that the program’s original design must be changed. In this event, the program development cycle starts over and continues until no errors can be found.\n\n:::\n\n---\n\n- Design is the most important part of the program development cycle\n- Understand the task that the program is to perform\n  - Work with customer to get a sense what the program is supposed to do\n  - Ask questions about program details\n  - Create one or more software requirements\n\n---\n\n\n- Determine the steps that must be taken to perform the task\n  - Break down required task into a series of steps\n  - Create an algorithm, listing logical steps that must be taken\n- Algorithm: set of well-defined logical steps that must be taken to perform a task\n\n\n---\n\n> Let's Practice\n\n1. Think about some important task\n2. Make an list of actions to complete the task\n\n\n## Pseudocode\n- **Pseudocode**: fake code [read more](https://medium.com/@danielur1995/why-you-should-pseudocode-f6c5cd44cd40)\n  - Informal language that has no syntax rule\n  - Not meant to be compiled or executed\n  - Used to create model program\n    - No need to worry about syntax errors, can focus on program’s design\n    - Can be translated directly into actual code in any programming language. \n\n---\n\n![](_img/sudo1.png){fig-align=center hight=500}\n\n---\n\n![](_img/sudo2.png){fig-align=center hight=500}\n\n---\n\n![](_img/sudo3.png){fig-align=center hight=500}\n\n## Flowchart\n\n- Flowchart: diagram that graphically depicts the steps\nin a program [read more](https://www.zenflowchart.com/flowchart-symbols)\n  - Ovals are terminal symbols\n  - Parallelograms are input and output symbols\n  - Rectangles are processing symbols\n  - Symbols are connected by arrows that represent the\nflow of the program\n\n---\n\n![](_img/flowchart0.png){fig-align=center hight=500}\n\n---\n\n![](_img/flowchart1.png){fig-align=center hight=500}\n\n---\n\n![](_img/flowchart2.png){fig-align=center hight=500}\n\n\n---\n\n<h2>Friendship Algorithm</h2>\n\n{{< video https://www.youtube.com/watch?v=v7OszHMNiVE width=\"100%\" height=\"85%\">}}\n\n---\n\n> Let's Practice\n\n1. Think about some important task\n2. Make an list of actions to complete the task\n3. Set a condition to achieve the task\n4. Set a loop to achieve the task\n\n# Input, Processing, and Output {background-color=\"black\" background-image=\"_resource/school_background_blured.png\" background-size=100%}\nInput is data that the program receives. When a program receives data,\nit usually processes it by performing some operation with it. The result\nof the operation is sent out of the program as output.\n\n## IPO\n- Typically, computer performs three-step process\n  - Receive **input**\n    - Input: any data that the program receives while it is running\n  - Perform some **process** on the input\n    - Example: mathematical calculation\n  - Produce **output**\n\n![](_img/ipo.png){fig-align=center height=180}\n\n\n\n# Displaying Output with the print Function {background-color=\"black\" background-image=\"_resource/school_background_blured.png\" background-size=100%}\n\n::: {#37402722 .cell execution_count=1}\n``` {.python .cell-code}\nprint('Hello world')\nprint('Kate Austen')\nprint('123 Full Circle Drive')\nprint('Asheville, NC 28899')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello world\nKate Austen\n123 Full Circle Drive\nAsheville, NC 28899\n```\n:::\n:::\n\n\n## Related Concept\n- Function: piece of prewritten code that performs an operation\n- print function: displays output on the screen\n- Argument: data given to a function\n  - Example: data that is printed to screen\n- Statements in a program execute in the order that they appear\n- From top to bottom\n\n## Strings and String Literals\n- String: sequence of characters that is used as data\n- String literal: string that appears in actual code of a program\n  - Must be enclosed in single (') or double (\") quote marks\n  - String literal can be enclosed in triple quotes (''' or \"\"\")\n    - Enclosed string can contain both single and double quotes and can have multiple lines\n\n---\n\n::: {.panel-tabset}\n\n### ''\n\n::: {#3a8981c7 .cell execution_count=2}\n``` {.python .cell-code}\nprint('Hello world')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello world\n```\n:::\n:::\n\n\n### \"\"\n\n::: {#fc56c8b2 .cell execution_count=3}\n``` {.python .cell-code}\nprint(\"Hello world\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello world\n```\n:::\n:::\n\n\n### \"\"\" \"\"\"\n\n::: {#f3fb4cd0 .cell execution_count=4}\n``` {.python .cell-code}\nprint(\"\"\"Hello world\"\"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello world\n```\n:::\n:::\n\n\n### \"\" with ''\n\n::: {#4ada67c8 .cell execution_count=5}\n``` {.python .cell-code}\nprint(\"Chad's work was amazing\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nChad's work was amazing\n```\n:::\n:::\n\n\n### \"\"\" \"\"\" with \"\" \"\" and ''\n\n::: {#d4a879af .cell execution_count=6}\n``` {.python .cell-code}\nprint(\"\"\"Chad said, \"These classes's success factor is preview\".\"\"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nChad said, \"These classes's success factor is preview\".\n```\n:::\n:::\n\n\n:::\n\n\n## Comments\n- Comments: notes of explanation within a program\n  - Ignored by Python interpreter\n    - Intended for a person reading the program’s code\n  - Begin with a # character\n- End-line comment: appears at the end of a line of code\n  - Typically explains the purpose of that line\n\n---\n\n::: {#89fbba30 .cell execution_count=7}\n``` {.python .cell-code}\n# Define function for display message\ndef greet(): # Define greet function\n    print('Hello World!') # Display Hello World message\n\ngreet()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello World!\n```\n:::\n:::\n\n\n# Variables {background-color=\"black\" background-image=\"_resource/school_background_blured.png\" background-size=100%}\n\n## Overview\n:::{.r-fit-text}\n- Variable: name that represents a value stored in the computer memory\n  - Used to access and manipulate data stored in memory\n  - A variable references the value it represents\n- Assignment statement: used to create a variable and make it reference data\n  - General format is variable = expression\n    - Example: age = 29\n    - Assignment operator: the equal sign (=)\n:::\n\n::: {#80f84734 .cell execution_count=8}\n``` {.python .cell-code}\nname = \"chad\"\nage = 20\nprint(age, name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n20 chad\n```\n:::\n:::\n\n\n---\n\n- In assignment statement, variable receiving value must be on left side\n- A variable can be passed as an argument to a function\n  - Variable name should not be enclosed in quote marks\n- You can only use a variable if a value is assigned to it\n\n## Variable Naming Rules\n- Rules for naming variables in Python:\n  - Variable name cannot be a Python keyword\n  - Variable name cannot contain spaces\n  - First character must be a letter or an underscore\n  - After first character may use letters, digits, or underscores\n  - Variable names are case sensitive\n  - Variable name should reflect its use\n\n## Displaying Multiple Items with the print Function\n- Python allows one to display multiple items with a single call to print\n  - Items are separated by commas when passed as arguments\n  - Arguments displayed in the order they are passed to the function\n  - Items are automatically separated by a space when displayed on screen\n\n::: {#4e5e79ea .cell execution_count=9}\n``` {.python .cell-code}\nname = \"chad\"\nage = 20\nprint(\"Hello\", name+\".\", \"I heard that you got\", str(age)+\"th\", \"birthday\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello chad. I heard that you got 20th birthday\n```\n:::\n:::\n\n\n## Variable Reassignment\n:::{.r-fit-text}\n- Variables can reference different values while program is running\n- Garbage collection: removal of values that are no longer referenced by variables\n  - Carried out by Python interpreter\n- A variable can refer to item of any type\n  - Variable that has been assigned to one type can be reassigned to another type\n:::\n\n::: {#590b71bb .cell execution_count=10}\n``` {.python .cell-code}\nname = \"chad\"\nprint(name)\n\nname = \"Joe\"\nprint(name)\n\nname = 20\nprint(name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nchad\nJoe\n20\n```\n:::\n:::\n\n\n## Numeric Data Types, Literals, and the str Data Type\n:::{.r-fit-text}\n- Data types: categorize value in memory\n  - e.g., int for integer, float for real number, str used for storing strings in memory\n- Numeric literal: number written in a program\n  - No decimal point considered int, otherwise, considered float\n- Some operations behave differently depending on data type\n\n::: {#7e7c86a3 .cell output-location='column' execution_count=11}\n``` {.python .cell-code}\nnum1 = 20\nnum2 = 20.54\nnum3 = \"20.68\"\nprint(num1)\nprint(num2)\nprint(num3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n20\n20.54\n20.68\n```\n:::\n:::\n\n\n:::\n\n## Reassigning a Variable to a Different Type\n- A variable in Python can refer to items of any type\n\n# Reading Input from the Keyboard {background-color=\"black\" background-image=\"_resource/school_background_blured.png\" background-size=100%}\n\n## Overview\nMost programs need to read input from the user\n\n- Built-in inputfunction reads input from keyboard\n  - Returns the data as a string\n  - Format: variable = input(prompt)\n    - prompt is typically a string instructing user to enter a value\n  - Does not automatically display a space after the prompt\n\n---\n\n:::{.r-fit-text}\n- input function always returns a string\n- Built-in functions convert between data types\n  - int(item)converts item to an int\n  - float(item)converts item to a float\n  - Nested function call: general format:\n    - function1(function2(argument))\n    - value returned by function2 is passed to function1\n  - Type conversion only works if item is valid numeric value, otherwise, throws exception\n\n::: {#edf35103 .cell output-location='column' execution_count=12}\n``` {.python .cell-code}\nnum1 = 20\nnum2 = 20.54\nnum3 = \"20.68\"\nprint(num1)\nprint(num2)\nprint(num3)\nprint(float(num1))\nprint(int(num2))\nprint(num2 + float(num3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n20\n20.54\n20.68\n20.0\n20\n41.22\n```\n:::\n:::\n\n\n:::\n\n# Performing Calculations {background-color=\"black\" background-image=\"_resource/school_background_blured.png\" background-size=100%}\n\n\n## Overview\n:::{.r-fit-text}\n- Math expression: performs calculation and gives a value\n  - Math operator: tool for performing calculation\n  - Operands: values surrounding operator\n  - Variables can be used as operands, resulting value typically assigned to variable\n- Two types of division:\n  - / operator performs floating point division, // operator performs integer division\n  - Positive results truncated, negative rounded away from zero\n\n::: {#fd992468 .cell output-location='column' execution_count=13}\n``` {.python .cell-code}\nprint(1+2)\nprint(58-782)\nprint(35*72)\nprint(4/2)\nprint(4//2)\nprint(5//2)\nprint(((1+2) * (58-782)) / 35*72)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n-724\n2520\n2.0\n2\n2\n-4468.114285714286\n```\n:::\n:::\n\n\n:::\n\n## Operator Precedence and Grouping with Parentheses\nPython operator precedence:\n\n- Operations enclosed in parentheses\n  - Forces operations to be performed before others\n- Exponentiation (**)\n- Multiplication (*), division (/ and //), and remainder (%)\n- Addition (+) and subtraction (-)\n  - Higher precedence performed first\n  - Same precedence operators execute from left to right\n\n## The Exponent Operator and the\n:::{.r-fit-text}\nRemainder Operator:\n\n- Exponent operator (**): Raises a number to a power\n  - x ** y = xy\n- Remainder operator (%): Performs division and returns the remainder\n  - a.k.a. modulus operator\n  - e.g., 4%2=0, 5%2=1\n  - Typically used to convert times and distances, and to detect odd or even numbers\n\n::: {#91551e17 .cell output-location='column' execution_count=14}\n``` {.python .cell-code}\nprint(4**2)\nprint(4^2)\nprint(4%2)\nprint(5%2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n16\n6\n0\n1\n```\n:::\n:::\n\n\n:::\n\n## Converting Math Formulas to Programming Statements\n- Operator required for any mathematical operation\n- When converting mathematical expression to programming statement:\n  - May need to add multiplication operators\n  - May need to insert parentheses\n\n## Mixed-Type Expressions and Data Type Conversion\n:::{.r-fit-text}\n- Data type resulting from math operation depends on data types of operands\n  - Two intvalues: result is an int\n  - Two floatvalues: result is a float\n  - int and float: int temporarily converted to float, result of the operation is a float\n  - Mixed-type expression\n    - Type conversion of float to int causes truncation of fractional part\n\n::: {#7ac6a6ad .cell output-location='column' execution_count=15}\n``` {.python .cell-code}\nprint(10 + 11)\nprint(10.1 + 11.3)\nprint(10.1 + 11)\nprint(float(10)+11)\nprint(int(12.1235845865))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n21\n21.4\n21.1\n21.0\n12\n```\n:::\n:::\n\n\n:::\n\n\n## Breaking Long Statements into Multiple Lines\n- Long statements cannot be viewed on screen without scrolling and cannot be printed without cutting off\n- Multiline continuation character `(\\)`: Allows to break a\nstatement into multiple lines\n\n::: {#dd51f285 .cell execution_count=16}\n``` {.python .cell-code}\nresult = var1 * 2 + var2 * 3 + \\\nvar3 * 4 + var4 * 5\n```\n:::\n\n\n---\n\n- Any part of a statement that is enclosed in parentheses can be broken without the line continuation character.\n\n::: {#69453071 .cell execution_count=17}\n``` {.python .cell-code}\nprint(\"Monday's sales are\", monday, \"and Tuesday's sales are\", tuesday, \"and Wednesday's sales are\", Wednesday)\ntotal = (value1 + value2 + value3 + value4 + value5 + value6)\n```\n:::\n\n\n# String Concatenation {background-color=\"black\" background-image=\"_resource/school_background_blured.png\" background-size=100%}\n\n## Syntex \n- To append one string to the end of another string\n- Use the + operator to concatenate strings\n\n::: {#a0c55127 .cell output-location='column' execution_count=18}\n``` {.python .cell-code}\nmessage = 'Hello' + 'world'\nprint(message)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelloworld\n```\n:::\n:::\n\n\n- You can use string concatenation to break up a long string literal \n\n::: {#c8858b3f .cell output-location='column' execution_count=19}\n``` {.python .cell-code}\nprint('Enter the amount of ' + 'sales for each day and ' + 'press Enter.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEnter the amount of sales for each day and press Enter.\n```\n:::\n:::\n\n\n## Implicit String Literal Concatenation\n- Two or more string literals written adjacent to each other are implicitly concatenated into a single string\n\n::: {#6b884b38 .cell output-location='column' execution_count=20}\n``` {.python .cell-code}\nmy_str = 'one' 'two' 'three'\nprint(my_str)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nonetwothree\n```\n:::\n:::\n\n\n::: {#933df103 .cell output-location='column' execution_count=21}\n``` {.python .cell-code}\nprint('Enter the amount of ' 'sales for each day and ' 'press Enter.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEnter the amount of sales for each day and press Enter.\n```\n:::\n:::\n\n\n# More About the print Function {background-color=\"black\" background-image=\"_resource/school_background_blured.png\" background-size=100%}\n\n\n## Overview\n:::{.r-fit-text}\n- print function displays line of output\n  - Newline character at end of printed data\n  - Special argument end='delimiter'causes print to place delimiter at end of data instead of newline character\n- printfunction uses space as item separator\n  - Special argument sep='delimiter'causes print to use delimiter as item separator Special characters appearing in string literal\n  - Preceded by backslash `(\\)`\n    - Examples: newline `(\\n)`, horizontal tab `(\\t)`\n  - Treated as commands embedded in string\n\n:::\n\n# Displaying Formatted Output with F-strings {background-color=\"black\" background-image=\"_resource/school_background_blured.png\" background-size=100%}\n\n\n## Overview\n\n::: {.panel-tabset}\n\n### Basic\n- An f-string is a special type of string literal that is prefixed with the letter f\n\n::: {#b49b0335 .cell output-location='column' execution_count=22}\n``` {.python .cell-code}\nprint(f'Hello world')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello world\n```\n:::\n:::\n\n\n### Placeholders\n- F-strings support placeholders for variables\n\n::: {#8c873ec6 .cell output-location='column' execution_count=23}\n``` {.python .cell-code}\nname = 'Johnny'\nprint(f'Hello {name}.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello Johnny.\n```\n:::\n:::\n\n\n:::\n\n---\n\n::: {.panel-tabset}\n\n### example1\n- Placeholders can also be expressions that are evaluated\n\n::: {#9533800b .cell output-location='column' execution_count=24}\n``` {.python .cell-code}\nprint(f'The value is {10 + 2}.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe value is 12.\n```\n:::\n:::\n\n\n### example2\n\n::: {#43e07aa0 .cell output-location='column' execution_count=25}\n``` {.python .cell-code}\nval = 10\nprint(f'The value is {val + 2}.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe value is 12.\n```\n:::\n:::\n\n\n### example3 format\n- Format specifiers can be used with placeholders\n\n::: {#5ee0e89c .cell output-location='column' execution_count=26}\n``` {.python .cell-code}\nnum = 123.456789\nprint(f'{num:.2f}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n123.46\n```\n:::\n:::\n\n\n-.2f means:\n  - round the value to 2 decimal places\n  - display the value as a floating-point number\n\n:::\n\n---\n\n::: {.panel-tabset}\n### Number\n- Other examples:\n\n::: {#18a5377a .cell output-location='column' execution_count=27}\n``` {.python .cell-code}\nnum = 1000000.00\nprint(f'{num:,.2f}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1,000,000.00\n```\n:::\n:::\n\n\n### Percentage\n\n::: {#135fbbe9 .cell output-location='column' execution_count=28}\n``` {.python .cell-code}\ndiscount = 0.5\nprint(f'{discount:.0%}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n50%\n```\n:::\n:::\n\n\n### , after\n\n::: {#01f2f2df .cell output-location='column' execution_count=29}\n``` {.python .cell-code}\nnum = 123456789\nprint(f'{num:,d}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n123,456,789\n```\n:::\n:::\n\n\n### 2 decimal\n\n::: {#00ae9fa6 .cell output-location='column' execution_count=30}\n``` {.python .cell-code}\nnum = 12345.6789\nprint(f'{num:.2e}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.23e+04\n```\n:::\n:::\n\n\n:::\n\n---\n\n::: {.panel-tabset}\n\n### Minimum field\n- Specifying a minimum field width:\n\n::: {#41f15797 .cell output-location='column' execution_count=31}\n``` {.python .cell-code}\nnum = 12345.6789\nprint(f'The number is {num:12,.2f}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe number is    12,345.68\n```\n:::\n:::\n\n\n### Aligning\n- Aligning values within a field\n  - Use < for left alignment\n  - Use > for right alignment\n  - Use ^ for center alignment\n-Examples:\n\n::: {#54296221 .cell output-location='column' execution_count=32}\n``` {.python .cell-code}\nprint(f'{num:<20.2f}')\nprint(f'{num:>20.2f}')\nprint(f'{num:^20.2f}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n12345.68            \n            12345.68\n      12345.68      \n```\n:::\n:::\n\n\n### Format specifier\n- The order of designators in a format specifier\n  - When using multiple designators in a format specifier, write them in this order:\n  - [alignment][width][,][.precision][type]\n-Example:\n\n::: {#0314df4c .cell output-location='column' execution_count=33}\n``` {.python .cell-code}\nprint(f'{num:^10,.2f}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n12,345.68 \n```\n:::\n:::\n\n\n:::\n\n\n# Named Constants {background-color=\"black\" background-image=\"_resource/school_background_blured.png\" background-size=100%}\n\n## Magic Numbers\n- A magic number is an unexplained numeric value that appears in a program’s code. \n- Example:\n\n::: {#b203281e .cell execution_count=34}\n``` {.python .cell-code}\namount = balance * 0.069\n```\n:::\n\n\n- What is the value 0.069? An interest rate? A fee percentage? Only the person who wrote the code knows for sure.\n\n## The Problem with Magic Numbers\n- It can be difficult to determine the purpose of the number.\n- If the magic number is used in multiple places in the program, it can take a lot of effort to change the number in each location, should the need arise.\n- You take the risk of making a mistake each time you type the magic number in the program’s code.\n  - For example, suppose you intend to type 0.069, but you accidentally type .0069. This mistake will cause mathematical errors that can be difficult to find.\n\n## Named Constants\n- You should use named constants instead of magic numbers.\n- A named constant is a name that represents a value that does not change during the program's execution.\n- Example:\n\n::: {#a5b24cb2 .cell execution_count=35}\n``` {.python .cell-code}\nINTEREST_RATE = 0.069\n```\n:::\n\n\n- This creates a named constant named INTEREST_RATE, assigned the value 0.069. It can be used instead of the magic number:\n\n::: {#dbaaaf2d .cell execution_count=36}\n``` {.python .cell-code}\namount = balance * INTEREST_RATE\n```\n:::\n\n\n## Advantages of Using Named Constants\n- Named constants make code self-explanatory (self-documenting)\n- Named constants make code easier to maintain (change the value assigned to the constant, and the new value takes effect everywhere the constant is\nused)\n- Named constants help prevent typographical errors that are common when using magic numbers\n\n# Introduction to Turtle Graphics {background-color=\"black\" background-image=\"_resource/school_background_blured.png\" background-size=100%}\n\n\n## Overview \n- Python's turtle graphics system displays a small cursor known as a turtle.\n- You can use Python statements to move the turtle around the screen, drawing lines and shapes.\n\n- To use the turtle graphics system, you must import the turtle module with this statement:\n\n::: {#65d90e51 .cell execution_count=37}\n``` {.python .cell-code}\nimport turtle\n```\n:::\n\n\nThis loads the turtle module into memory\n\n## Moving the Turtle Forward\n- Use the turtle.forward(n)statement to move the turtle forward n pixels.\n\n::: {#c7a2ec04 .cell execution_count=38}\n``` {.python .cell-code}\nimport turtle\nturtle.forward(100)\n```\n:::\n\n\n## Turning the Turtle\n- The turtle's initial heading is 0 degrees (east)\n- Use the turtle.right(angle)statement to turn the turtle right by angle degrees.\n- Use the turtle.left(angle)statement to turn the turtle left by angle degrees.\n\n::: {#663eba00 .cell execution_count=39}\n``` {.python .cell-code}\nimport turtle\nturtle.forward(100)\nturtle.left(90)\nturtle.forward(100)\n```\n:::\n\n\n::: {#22425f77 .cell execution_count=40}\n``` {.python .cell-code}\nimport turtle\nturtle.forward(100)\nturtle.right(45)\nturtle.forward(100)\n```\n:::\n\n\n## Setting the Turtle's Heading\n- Use the turtle.setheading(angle)statement toset the turtle's heading to a specific angle.\n\n::: {#3176dc0a .cell execution_count=41}\n``` {.python .cell-code}\nimport turtle\nturtle.forward(50)\nturtle.setheading(90)\nturtle.forward(100)\nturtle.setheading(180)\nturtle.forward(50)\nturtle.setheading(270)\nturtle.forward(100)\n```\n:::\n\n\n## Setting the Pen Up or Down\n- When the turtle's pen is down, the turtle draws a line as it moves. By default, the pen is down.\n- When the turtle's pen is up, the turtle does not draw as it moves.\n- Use the turtle.penup()statement to raise the pen.\n- Use the turtle.pendown()statement to lower the pen.\n\n::: {#34935e3b .cell execution_count=42}\n``` {.python .cell-code}\nimport turtle\nturtle.forward(50)\nturtle.penup()\nturtle.forward(25)\nturtle.pendown()\nturtle.forward(50)\nturtle.penup()\nturtle.forward(25)\nturtle.pendown()\nturtle.forward(50)\n```\n:::\n\n\n## Drawing Circles\n- Use the turtle.circle(radius)statement to\ndraw a circle with a specified radius.\n\n::: {#64a899c6 .cell execution_count=43}\n``` {.python .cell-code}\nimport turtle\nturtle.circle(100)\n```\n:::\n\n\n## Drawing Dots\n- Use the turtle.dot()statement to draw a simple dot at the turtle's current location.\n\n::: {#6e7a5def .cell execution_count=44}\n``` {.python .cell-code}\nimport turtle\nturtle.dot()\nturtle.forward(50)\nturtle.dot()\nturtle.forward(50)\nturtle.dot()\nturtle.forward(50)\n```\n:::\n\n\n## Changing the Pen Size and Drawing Color\n- Use the turtle.pensize(width)statement to change the width of the turtle's pen, in pixels.\n- Use the turtle.pencolor(color)statement to change the turtle's drawing color.\n  - See Appendix D in your textbook for a complete list of colors.\n\n::: {#ca493285 .cell execution_count=45}\n``` {.python .cell-code}\nimport turtle\nturtle.pensize(5)\nturtle.pencolor('red')\nturtle.circle(100)\n```\n:::\n\n\n## Working with the Turtle's Window\n- Use the turtle.bgcolor(color)statement to set the window's background color.\n  - See Appendix D in your textbook for a complete list of colors.\n- Use the turtle.setup(width,height)statement to set the size of the turtle's window, in pixels.\n  - The width and height arguments are the width and height, in pixels.\n  - For example, the following interactive session creates a graphics window that is 640 pixels wide and 480 pixels high:\n\n::: {#2e976366 .cell execution_count=46}\n``` {.python .cell-code}\nimport turtle\nturtle.setup(640, 480)\n```\n:::\n\n\n## Resetting the Turtle’s Window{.smaller}\n- The turtle.reset()statement:\n  - Erases all drawings that currently appear in the graphics window.\n  - Resets the drawing color to black.\n  - Resets the turtle to its original position in the center of the screen.\n  - Does not reset the graphics window’s background color.\n\n- The turtle.clear()statement:\n  - Erases all drawings that currently appear in the graphics window.\n  - Does not change the turtle's position.\n  - Does not change the drawing color.\n  - Does not change the graphics window’s background color.\n\n---\n\n- The turtle.clearscreen()statement:\n  - Erases all drawings that currently appear in the graphics window.\n  - Resets the drawing color to black.\n  - Resets the turtle to its original position in the center of the screen.\n  - Resets the graphics window’s background color to white.\n\n## Working with Coordinates\n- The turtle uses Cartesian Coordinates\n\n## Moving the Turtle to a Specific Location\n- Use the turtle.goto(x, y)statement to move the turtle to a specific location.\n\n::: {#03a5a1ba .cell execution_count=47}\n``` {.python .cell-code}\nimport turtle\nturtle.goto(0, 100)\nturtle.goto(−100, 0)\nturtle.goto(0, 0)\n```\n:::\n\n\n- The turtle.pos() statement displays the turtle's current X,Y coordinates.\n- The turtle.xcor() statement displays the turtle's current X coordinate and the turtle.ycor() statement displays the turtle's current Y coordinate.\n\n## Animation Speed\n- Use the turtle.speed(speed)command to change the speed at which the turtle moves.\n  - The speed argument is a number in the range of 0 through 10.\n  - If you specify 0, then the turtle will make all of its moves instantly (animation is disabled).\n\n## Hiding and Displaying the Turtle\n- Use the turtle.hideturtle()command to hide the turtle.\n  - This command does not change the way graphics are drawn, it simply hides the turtle icon.\n- Use the turtle.showturtle()command to display the turtle.\n\n## Displaying Text\n- Use the turtle.write(text)statement to display text in the turtle's graphics window.\n  - The text argument is a string that you want to display.\n  - The lower-left corner of the first character will be\npositioned at the turtle’s X and Y coordinates.\n\n::: {#69245083 .cell execution_count=48}\n``` {.python .cell-code}\nimport turtle\nturtle.write('Hello World')\n```\n:::\n\n\n## Filling Shapes\n- To fill a shape with a color:\n  - Use the turtle.begin_fill()command before drawing the shape\n  - Then use the turtle.end_fill()command after the shape is drawn.\n  - When the turtle.end_fill()command executes, the shape will be filled with the current fill color\n\n::: {#265c8136 .cell execution_count=49}\n``` {.python .cell-code}\nimport turtle\nturtle.hideturtle()\nturtle.fillcolor('red')\nturtle.begin_fill()\nturtle.circle(100)\nturtle.end_fill()\n```\n:::\n\n\n## Getting Input With a Dialog Box\n\n::: {#925e3b74 .cell execution_count=50}\n``` {.python .cell-code}\nimport turtle\nage = turtle.numinput('Input', 'Enter your age')\n```\n:::\n\n\n::: {#2c71a4f5 .cell execution_count=51}\n``` {.python .cell-code}\nimport turtle\nname = turtle.textinput('Input', 'Enter your name')\n```\n:::\n\n\n- Specifying a default value, minimum value, and maximum value with turtle.numinput:\n\n::: {#405ecb1b .cell execution_count=52}\n``` {.python .cell-code}\nimport turtle\nnum = turtle.numinput('Input', 'Enter a number', default=10, minval=0, maxval=100)\n```\n:::\n\n\n- An error message will be displayed if the input is less than minvalor greater than maxval\n\n## Keeping the Graphics Window Open\n- When running a turtle graphics program outside IDLE, the graphics window closes immediately when the program is done.\n- To prevent this, add the turtle.done()statementto the very end of your  turtle graphics programs.\n  - This will cause the graphics window to remain open, so you can see its contents after the program finishes executing.\n\n# Summary\n- This chapter covered:\n  - The program development cycle, tools for program design, and the design process\n  - Ways in which programs can receive input, particularly from the keyboard\n  - Ways in which programs can present and format output\n  - Use of comments in programs\n  - Uses of variables and named constants\n  - Tools for performing calculations in programs\n  - The turtle graphics system\n\n# House management {background-color=\"black\" background-image=\"_resource/school_background_blured.png\" background-size=100%}\n\n## Assignment {.smaller}\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n- What to do\n:::\n\n::: {.column width=\"60%\"}\n- Requirement\n  - PDF format\n  - file name should be include your student id and name\n    - stuID_name_title.pdf (e.g. 1111111_ChungilChae_SelfIntroduction.pdf)\n- Due date\n  - by Feb23(Sun) 11:59PM\n  - NO LATE SUBMISSION ALLOWED!!!!\n:::\n\n::::\n\n# Reference\n\n",
    "supporting": [
      "chapter2_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}